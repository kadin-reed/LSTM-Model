import pandas as pd
import matplotlib.pyplot as plt

# Load the data
data = pd.read_csv(r'AllData.txt')

# Remove rows with missing Energy Output
data = data.dropna(subset=['Energy Output'])

# Convert 'Date' to datetime and set as index
data['Date'] = pd.to_datetime(data['Date'])
data.set_index('Date', inplace=True)

# Normalize Energy Output
data['Energy Output (kWh)'] = data['Energy Output'] / 1000

# Define units for the variables
units = {
    'Temperature': '°C',
    'Clearsky GHI': 'w/m²',
    'DHI': 'w/m²',
    'GHI': 'w/m²',
    'Clearsky DHI': 'w/m²',
    'Clearsky DNI': 'w/m²',
    'DNI': 'w/m²',
    'Solar Zenith Angle': 'Degree',
    'Relative Humidity': '%',
    'Surface Albedo': 'N/A',
    'Energy Output (kWh)': 'kWh'
}

# Variables to plot
variables = ['Temperature', 'Clearsky GHI', 'DHI', 'GHI', 'Clearsky DHI',
             'Clearsky DNI', 'DNI', 'Solar Zenith Angle', 'Relative Humidity', 'Surface Albedo']

# Plot each variable
for var in variables:
    plt.figure(figsize=(10, 5))
    plt.plot(data.index, data[var], label=var)
    plt.title(var)
    plt.xlabel('Year')
    plt.ylabel(f'{var} ({units[var]})')
    plt.legend()
    plt.grid(True)
    plt.show()

# Plot Energy Output
plt.figure(figsize=(10, 5))
plt.plot(data.index, data['Energy Output (kWh)'], label='Energy Output (kWh)', color='red')
plt.title('Energy Output')
plt.xlabel('Year')
plt.ylabel('Energy Output (kWh)')
plt.legend()
plt.grid(True)
plt.show()

# Combined plot
fig, axes = plt.subplots(nrows=len(variables) + 1, ncols=1, figsize=(12, 20))

for i, var in enumerate(variables):
    axes[i].plot(data.index, data[var], label=f'{var} ({units[var]})', alpha=0.7)
    axes[i].legend(fontsize=8)
    axes[i].grid(True)
    axes[i].set_xticks([])

axes[-1].plot(data.index, data['Energy Output (kWh)'], label='Energy Output (kWh)', color='red', alpha=0.7)
axes[-1].set_xlabel('Year')
axes[-1].legend(fontsize=8)
axes[-1].grid(True)
axes[-1].set_xticks(data.index[::len(data.index)//10])
axes[-1].set_xticklabels([date.strftime('%Y') for date in data.index[::len(data.index)//10]])

plt.tight_layout()
plt.show()
